name: Deploy to VPS
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Set project variables
            export PROJECT_NAME="enfyra-cms"
            export APP_DIR="/apps/$PROJECT_NAME"
            export DEPLOYMENT_DIR="/deployments/$PROJECT_NAME"
            
            # Update source code
            cd $APP_DIR
            git reset --hard HEAD
            git clean -fd
            git pull origin main
            export IMAGE_TAG=$(git rev-parse --short HEAD)
            
            # Build with timeout and retry
            echo "Building Docker image $PROJECT_NAME:$IMAGE_TAG..."
            if ! timeout 600 docker build -t $PROJECT_NAME:$IMAGE_TAG . ; then
              echo "Build failed or timed out, retrying..."
              docker system prune -f || true
              timeout 600 docker build -t $PROJECT_NAME:$IMAGE_TAG . || exit 1
            fi
            
            # Verify build success
            if ! docker images $PROJECT_NAME:$IMAGE_TAG | grep -q $IMAGE_TAG; then
              echo "ERROR: Docker image build failed!"
              exit 1
            fi
            
            echo "Build completed successfully"
            
            # Detect K8s mode early
            export K8S_MODE=$(yq ".kubernetes.provider" ~/configs/$PROJECT_NAME.yaml 2>/dev/null || echo "microk8s")
            echo "K8S_MODE detected: $K8S_MODE"
            
            # Configure image for MicroK8s - Use direct import (no registry)
            if [ "$K8S_MODE" = "microk8s" ]; then
              echo "=== Importing image to MicroK8s ==="
              
              # Direct import to MicroK8s containerd (faster & reliable)
              echo "Importing $PROJECT_NAME:$IMAGE_TAG to MicroK8s..."
              docker save $PROJECT_NAME:$IMAGE_TAG | microk8s ctr image import -
              
              # Verify import success
              if microk8s ctr images list | grep -q "$PROJECT_NAME:$IMAGE_TAG"; then
                echo "✅ Image successfully imported to MicroK8s"
                export PULUMI_IMAGE="$PROJECT_NAME:$IMAGE_TAG"
              else
                echo "❌ Failed to import image"
                exit 1
              fi
              
              echo "=== MicroK8s import completed ==="
            fi

            # Setup Kubernetes config
            cd $DEPLOYMENT_DIR

            if [ "$K8S_MODE" = "microk8s" ]; then
              echo "Using MicroK8s configuration"
              export KUBECONFIG=/var/snap/microk8s/current/credentials/client.config
            else
              echo "Using kubeadm configuration"
              export KUBECONFIG=/etc/kubernetes/admin.conf
            fi

            # Setup Pulumi environment
            export PATH=$PATH:$HOME/.pulumi/bin
            export PULUMI_CONFIG_PASSPHRASE=''

            # Run Pulumi deployment with new image tag
            pulumi version
            pulumi login file://$(pwd)/.pulumi
            pulumi stack select $PROJECT_NAME
            
            # Clear any existing locks
            pulumi cancel || true
            
            pulumi config set image ${PULUMI_IMAGE:-$PROJECT_NAME:$IMAGE_TAG}
            pulumi up --yes
            
            echo "=== Deployment completed successfully ==="

  # Aggressive cleanup AFTER deploy to remove old images
  cleanup:
    needs: deploy
    uses: ./.github/workflows/cleanup.yaml
    with:
      project_name: 'enfyra-cms'
    secrets:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}

