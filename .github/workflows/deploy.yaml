name: Deploy to VPS
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Update source code in /apps/enfyra-backend
            cd /apps/enfyra-backend
            git reset --hard HEAD
            git clean -fd
            git pull origin main
            export IMAGE_TAG=$(git rev-parse --short HEAD)
            docker build -t enfyra-backend:$IMAGE_TAG .

            # Detect K8s mode early
            export K8S_MODE=$(yq '.kubernetes.provider' ~/configs/enfyra-backend.yaml 2>/dev/null || echo "microk8s")
            echo "K8S_MODE detected: $K8S_MODE"

            # Import image to MicroK8s  
            if [ "$K8S_MODE" = "microk8s" ]; then
              echo "=== Importing image enfyra-backend:$IMAGE_TAG to MicroK8s ==="
              echo "Saving Docker image to tar file..."
              docker save enfyra-backend:$IMAGE_TAG -o /tmp/enfyra-backend-$IMAGE_TAG.tar
              echo "Tar file created: $(ls -lh /tmp/enfyra-backend-$IMAGE_TAG.tar)"
              
              echo "Importing to MicroK8s..."
              microk8s ctr image import /tmp/enfyra-backend-$IMAGE_TAG.tar
              
              echo "Verifying import..."
              microk8s ctr images list | grep enfyra-backend:$IMAGE_TAG || echo "ERROR: Image not found after import!"
              
              echo "Cleaning up..."
              rm -f /tmp/enfyra-backend-$IMAGE_TAG.tar
              echo "=== Image import completed ==="
            fi

            # Setup Kubernetes config
            cd /deployments/enfyra-backend

            if [ "$K8S_MODE" = "microk8s" ]; then
              echo "Using MicroK8s configuration"
              export KUBECONFIG=/var/snap/microk8s/current/credentials/client.config
            else
              echo "Using kubeadm configuration"
              export KUBECONFIG=/etc/kubernetes/admin.conf
            fi

            # Setup Pulumi environment
            export PATH=$PATH:$HOME/.pulumi/bin
            export PULUMI_CONFIG_PASSPHRASE=''

            # Run Pulumi deployment with new image tag
            pulumi version
            pulumi login file://$(pwd)/.pulumi
            pulumi stack select enfyra-backend

            # Clear any existing locks
            pulumi cancel || true

            pulumi config set image enfyra-backend:$IMAGE_TAG
            pulumi up --yes

            # Cleanup old Docker images (keep latest 3)
            echo "=== Cleaning up old Docker images ==="
            echo "Current Docker images:"
            docker images enfyra-backend --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}\t{{.Size}}" | grep -v REPOSITORY

            # Remove old Docker enfyra-backend images except latest 3 
            echo "Removing old Docker images (keeping latest 3)..."
            docker images enfyra-backend --format "{{.Repository}}:{{.Tag}}" | grep -v latest | tail -n +4 | xargs -r docker rmi -f || true

            # Cleanup old K8s images based on provider
            if [ "$K8S_MODE" = "microk8s" ]; then
              echo "Cleaning up old MicroK8s images..."
              microk8s ctr images list -q | grep enfyra-backend | grep -v latest | tail -n +4 | xargs -r microk8s ctr images remove || true
            else
              echo "Cleaning up old kubeadm/containerd images..."
              # List all enfyra-backend images, keep latest 3, remove older ones
              crictl images | grep enfyra-backend | grep -v '<none>' | sort -k4 -r | tail -n +4 | awk '{print $3}' | xargs -r crictl rmi || true
            fi

            # Show remaining images after cleanup
            echo "=== Remaining images after cleanup ==="
            if [ "$K8S_MODE" = "microk8s" ]; then
              echo "MicroK8s images:"
              microk8s ctr images list | grep enfyra-backend || echo "No enfyra-backend images found"
            else
              echo "Containerd images:"
              crictl images | grep enfyra-backend || echo "No enfyra-backend images found"
            fi

            echo "Docker images:"
            docker images enfyra-backend --format "table {{.Repository}}:{{.Tag}}\\t{{.CreatedAt}}\\t{{.Size}}" || echo "No enfyra-backend images found"

            # Clean up Docker system (dangling images, unused networks, etc)
            echo "Running Docker system prune..."
            docker system prune -f --volumes || true

            echo "=== Cleanup completed ==="
